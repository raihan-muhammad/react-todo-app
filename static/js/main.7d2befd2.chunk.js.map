{"version":3,"sources":["components/buttons/index.js","container/templates/auth/index.js","config/firebase/index.js","container/pages/login/index.js","config/redux/action/index.js","container/pages/register/index.js","config/redux/reducer/index.js","config/redux/store/index.js","container/pages/dashboard/index.js","container/pages/app/index.js","serviceWorker.js","index.js"],"names":["Button","onClick","title","loading","className","disabled","Auth","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","Login","hendleInput","el","setState","target","id","value","hendleLogin","a","state","email","password","props","login","history","catch","err","res","localStorage","setItem","JSON","stringify","push","pesan","this","type","placeholder","onChange","to","isLoading","connect","dispatch","data","Promise","resolve","reject","auth","signInWithEmailAndPassword","then","dataUser","user","uid","isLogin","errorMessage","message","loginAPI","Register","hendleRegister","register","console","log","success","error","isError","createUserWithEmailAndPassword","registerAPI","initialState","task","reducer","action","store","createStore","applyMiddleware","thunk","Dashboard","hendleCreate","userId","parse","getItem","alert","hendleDone","e","stopPropagation","todoId","deleteTask","userData","getTask","todo","length","map","key","ref","setTimeout","addTask","url","on","snapshot","val","Object","keys","remove","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d2befd2.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Button = ({ onClick, title, loading }) => {\n    if (loading) {\n        return <button className=\"btn-primary\" disabled>Loading...</button>\n    }\n    return (\n        <button className=\"btn-primary\" onClick={onClick}>{title}</button>\n    )\n}\n\nexport default Button;","import React, { Component } from \"react\";\n\nclass Auth extends Component {\n    render() {\n        return (\n            <div className=\"login__kiri\">\n                <h1 className=\"login__big-text\">TODO APP</h1>\n                <p className=\"login__small-text\">Todo App ini di buat oleh raihan muhammad ketika sedang belajar react js pada tanggal 19-04-2020</p>\n            </div>\n        )\n    }\n}\n\nexport default Auth;","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDVpzJjt3pqYms9_AlSuVMgiITGwvkL8Aw\",\n    authDomain: \"todo-list-779f8.firebaseapp.com\",\n    databaseURL: \"https://todo-list-779f8.firebaseio.com\",\n    projectId: \"todo-list-779f8\",\n    storageBucket: \"todo-list-779f8.appspot.com\",\n    messagingSenderId: \"1078863429281\",\n    appId: \"1:1078863429281:web:dad2c6f201ca0fa46ebae0\",\n    measurementId: \"G-PVJSBLWM1J\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const database = firebase.database();\n\nexport default firebase;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"../../../components/buttons\";\nimport Auth from \"../../templates/auth\";\nimport { connect } from \"react-redux\";\nimport { loginAPI } from \"../../../config/redux/action\";\n\nclass Login extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            pesan: ''\n        }\n    }\n\n    hendleInput = el => {\n        this.setState({\n            [el.target.id]: el.target.value\n        })\n    }\n\n    hendleLogin = async () => {\n        const { email, password } = this.state;\n        const { login, history } = this.props\n        const res = await login({ email, password }).catch(err => err)\n        if (res) {\n            localStorage.setItem('userData', JSON.stringify(res))\n            this.setState({\n                email: '',\n                password: '',\n            });\n            history.push('/dashboard')\n        } else {\n            this.setState({\n                pesan: 'Login Gagal!'\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <div className=\"login__kanan\">\n                    <p className=\"login__todo-text\">Todo<span>App</span></p>\n                    {\n                        this.state.pesan !== '' ? (<p className=\"login__danger-text\">{this.state.pesan}</p>) : null\n                    }\n                    <p className=\"login__login-text\">Log In</p>\n                    <input type=\"text\" id=\"email\" placeholder=\"Username\" value={this.state.email} onChange={this.hendleInput} className=\"login__input\" />\n                    <input type=\"password\" id=\"password\" placeholder=\"Password\" value={this.state.password} onChange={this.hendleInput} className=\"login__input\" />\n                    <p className=\"login__text-biasa\">Belum mempunyai akun? <Link to=\"/register\">daftar</Link></p>\n                    <Button title=\"Login\" onClick={this.hendleLogin} loading={this.props.isLoading} />\n                </div>\n                <Auth />\n            </div>\n        )\n    }\n}\n\nconst reduxState = state => ({\n    isLoading: state.isLoading\n})\n\nconst reduxDispatch = dispatch => ({\n    login: data => dispatch(loginAPI(data))\n})\n\nexport default connect(reduxState, reduxDispatch)(Login);","import firebase, { database } from \"../../firebase\";\n\nexport const registerAPI = data => dispatch => {\n    dispatch({ type: 'CHANGE_ISLOADING', value: true })\n    return new Promise((resolve, reject) => {\n        firebase.auth().createUserWithEmailAndPassword(data.email, data.password)\n            .then(res => {\n                dispatch({ type: 'CHANGE_ISLOADING', value: false })\n                resolve(true)\n            })\n            .catch(function (err) {\n                //const errorCode = err.code;\n                const errorMessage = err.message;\n                dispatch({ type: 'ERROR_MESSAGE', value: errorMessage });\n                dispatch({ type: 'CHANGE_ISLOADING', value: false });\n                reject(false)\n            })\n    })\n}\n\nexport const loginAPI = data => dispatch => {\n    dispatch({ type: 'CHANGE_ISLOADING', value: true })\n    return new Promise((resolve, reject) => {\n        firebase.auth().signInWithEmailAndPassword(data.email, data.password)\n            .then(res => {\n                const dataUser = {\n                    email: res.user.email,\n                    uid: res.user.uid,\n                    isLogin: true\n                }\n                dispatch({ type: 'CHANGE_ISLOADING', value: false })\n                dispatch({ type: 'CHANGE_LOGIN', value: true })\n                dispatch({ type: 'LOGIN_USER', value: dataUser })\n                resolve(dataUser);\n            })\n            .catch(function (err) {\n                //const errorCode = err.code;\n                const errorMessage = err.message;\n                dispatch({ type: 'ERROR_MESSAGE', value: errorMessage });\n                dispatch({ type: 'CHANGE_ISLOADING', value: false });\n                reject(false)\n            })\n    })\n}\n\nexport const addTask = data => dispatch => {\n    dispatch({ type: 'CHANGE_ISLOADING', value: true });\n    database.ref(`todo/${data.userId}`).push({\n        task: data.task\n    });\n    setTimeout(() => {\n        dispatch({ type: 'CHANGE_ISLOADING', value: false });\n    }, 1000);\n}\n\nexport const getTask = userId => dispatch => {\n    dispatch({ type: 'CHANGE_ISLOADING', value: true });\n    const url = database.ref(`todo/${userId}`);\n    return new Promise((resolve, reject) => {\n        url.on('value', function (snapshot) {\n            const data = [];\n            if (snapshot.val() !== null) {\n                Object.keys(snapshot.val()).map(key => {\n                    data.push({\n                        data: snapshot.val()[key],\n                        id: key\n                    })\n                });\n            } else {\n                dispatch({ type: 'CHANGE_ISLOADING', value: true });\n            }\n\n            dispatch({ type: 'CHANGE_ISLOADING', value: false });\n            dispatch({ type: 'GET_TASK', value: data });\n            resolve(snapshot.val());\n        })\n    })\n}\n\nexport const deleteTask = data => dispatch => {\n    const url = database.ref(`todo/${data.userId}/${data.todoId}`);\n    return new Promise((resolve, reject) => {\n        url.remove();\n    })\n}","import React, { Component } from \"react\";\nimport Button from \"../../../components/buttons\";\nimport { connect } from \"react-redux\";\nimport Auth from \"../../templates/auth\";\nimport { registerAPI } from \"../../../config/redux/action\";\nimport { Link } from \"react-router-dom\";\n\nclass Register extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            success: ''\n        }\n    }\n\n    hendleInput = el => {\n        this.setState({\n            [el.target.id]: el.target.value\n        })\n    }\n\n    hendleRegister = async () => {\n        const { email, password } = this.state;\n        const res = await this.props.register({ email, password }).catch(err => console.log(err));\n        if (res) {\n            this.setState({\n                email: '',\n                password: '',\n                success: 'Selamat! akun berhasil di tambah'\n            })\n        } else {\n            console.log('register gagal');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"login\">\n                <div className=\"login__kanan\">\n                    <p className=\"login__todo-text\">Todo<span>App</span></p>\n                    {\n                        this.state.success !== '' ? (<p className=\"login__success-text\">{this.state.success}</p>) : null\n                    }\n                    <p className=\"login__login-text\">Register</p>\n                    <input type=\"text\" placeholder=\"Email\" id=\"email\" onChange={this.hendleInput} value={this.state.email} className=\"login__input\" />\n                    <input type=\"password\" placeholder=\"Password\" id=\"password\" onChange={this.hendleInput} value={this.state.password} className=\"login__input\" />\n                    <p className=\"login__message\">{this.props.error}</p>\n                    <p className=\"login__text-biasa\">Sudah mempunyai akun? <Link to=\"/\">Login</Link></p>\n                    <Button title=\"Register\" onClick={this.hendleRegister} loading={this.props.isLoading} />\n                </div>\n                <Auth />\n            </div >\n        )\n    }\n}\n\nconst reduxState = state => ({\n    isLoading: state.isLoading,\n    error: state.isError\n})\n\nconst reduxDispatch = dispatch => ({\n    register: data => dispatch(registerAPI(data))\n})\n\nexport default connect(reduxState, reduxDispatch)(Register);","const initialState = {\n    isLoading: false,\n    isError: '',\n    isLogin: false,\n    task: []\n}\n\nconst reducer = (state = initialState, action) => {\n    if (action.type === 'CHANGE_ISLOADING') {\n        return {\n            ...state,\n            isLoading: action.value\n        }\n    }\n    if (action.type === 'ERROR_MESSAGE') {\n        return {\n            ...state,\n            isError: action.value\n        }\n    }\n    if (action.type === 'CHANGE_LOGIN') {\n        return {\n            ...state,\n            isLogin: action.value\n        }\n    }\n    if (action.type === 'GET_TASK') {\n        return {\n            ...state,\n            task: action.value\n        }\n    }\n    return state\n}\n\nexport default reducer;\n\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport reducer from \"../reducer\";\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n\n","import React, { Component, Fragment } from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"../../../components/buttons\";\nimport { addTask, getTask, deleteTask } from \"../../../config/redux/action\";\n\nclass Dashboard extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            task: ''\n        }\n    }\n\n    hendleInput = el => {\n        this.setState({\n            [el.target.id]: el.target.value\n        })\n    }\n\n    hendleCreate = () => {\n        const { task } = this.props;\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        const data = {\n            userId: userData.uid,\n            task: this.state.task\n        }\n        this.setState({\n            task: ''\n        })\n        if (this.state.task !== '') {\n            task(data);\n        } else {\n            alert('Masukan Task!');\n        }\n    }\n\n    hendleDone = (e, task) => {\n        e.stopPropagation();\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        const data = {\n            userId: userData.uid,\n            todoId: task.id\n        };\n        this.props.deleteTask(data);\n    }\n\n    componentDidMount() {\n        const { history } = this.props;\n        if (!this.props.login) {\n            history.push('/')\n        }\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        console.log(userData);\n        this.props.getTask(userData.uid);\n    }\n    render() {\n        const { todo } = this.props;\n        const userData = JSON.parse(localStorage.getItem('userData'));\n        return (\n            <div>\n                <section className=\"dashboard\">\n                    <p className=\"dashboard__text\">Todo App</p>\n                    <p className=\"dashboard__desc\">Hi, <span className=\"dashboard__user-text\">{userData.email}</span> This my todo application made with react and firebase</p>\n                    <div className=\"dashboard__flex\">\n                        <input type=\"text\" className=\"dashboard__input\" id=\"task\" placeholder=\"Add task\" value={this.state.task} onChange={this.hendleInput} />\n                        <Button title=\"Add\" onClick={this.hendleCreate} loading={this.props.loading} />\n                    </div>\n                </section>\n                {\n                    this.props.loading ? <div className=\"dashboard__text-task\">Loading...</div> :\n                        todo.length > 0 ? (\n                            <Fragment>\n                                {\n                                    todo.map(task => {\n                                        return (\n                                            <div className=\"dashboard__text-task\" key={task.id}>{task.data.task} <button onClick={e => this.hendleDone(e, task)}>Done</button> </div>\n                                        )\n                                    })\n                                }\n                            </Fragment>\n                        ) : <div className=\"dashboard__text-task\">No Task</div>\n                }\n            </div>\n        )\n    }\n}\n\nconst reduxState = state => ({\n    login: state.isLogin,\n    loading: state.isLoading,\n    todo: state.task\n})\n\nconst reduxDispatch = dispatch => ({\n    task: data => dispatch(addTask(data)),\n    getTask: data => dispatch(getTask(data)),\n    deleteTask: data => dispatch(deleteTask(data))\n})\n\nexport default connect(reduxState, reduxDispatch)(Dashboard);","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Login from \"../login\";\nimport Register from \"../register\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"../../../config/redux\";\nimport Dashboard from \"../dashboard\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/register\" component={Register} />\n        <Route path=\"/react-todo-app\" exact component={Login} />\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./container/pages/app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport firebase from \"./config/firebase\";\n\nconsole.log(firebase);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}